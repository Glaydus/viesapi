package viesapi

// VIES API error codes
type Error struct {
}

// Get error message
func (e *Error) message(code int) string {

	if code < CLI_CONNECT || code > CLI_INPUT {
		return ""
	}
	return _codes[code]
}

var _codes = map[int]string{
	CLI_CONNECT:    "Failed to connect to the VIES API service",
	CLI_RESPONSE:   "VIES API service response has invalid format",
	CLI_NUMBER:     "Invalid number type",
	CLI_NIP:        "NIP is invalid",
	CLI_EUVAT:      "EU VAT ID is invalid",
	CLI_EXCEPTION:  "Function generated an exception",
	CLI_DATEFORMAT: "Date has an invalid format",
	CLI_INPUT:      "Invalid input parameter",
}

const (
	NIP_EMPTY = iota + 1
	NIP_UNKNOWN
	GUS_LOGIN
	GUS_CAPTCHA
	GUS_SYNC
	NIP_UPDATE
	NIP_BAD
	CONTENT_SYNTAX
	NIP_NOT_ACTIVE
	INVALID_PATH
	EXCEPTION
	NO_PERMISSION
	GEN_INVOICES
	GEN_SPEC_INV
	SEND_INVOICE
	PREMIUM_FEATURE
	SEND_ANNOUNCEMENT
	INVOICE_PAYMENT
	REGON_BAD
	SEARCH_KEY_EMPTY
	KRS_BAD
	EUVAT_BAD
	VIES_SYNC
	CEIDG_SYNC
	RANDOM_NUMBER
	PLAN_FEATURE
	SEARCH_TYPE
	PPUMF_SYNC
	PPUMF_DIRECT
	NIP_FEATURE
	REGON_FEATURE
	KRS_FEATURE
	TEST_MODE
	ACTIVITY_CHECK
	ACCESS_DENIED
	MAINTENANCE
	BILLING_PLANS
	DOCUMENT_PDF
	EXPORT_PDF
	RANDOM_TYPE
	LEGAL_FORM
	GROUP_CHECKS
	CLIENT_COUNTERS
	URE_SYNC
	URE_DATA
	DKN_BAD
	SEND_REMAINDER
	EXPORT_JPK
	GEN_ORDER_INV
	SEND_EXPIRATION
	IBAN_SYNC
	ORDER_CANCEL
	WHITELIST_CHECK
	AUTH_TIMESTAMP
	AUTH_MAC
	IBAN_BAD
)

const (
	DB_AUTH_IP = iota + 101
	DB_AUTH_KEY_STATUS
	DB_AUTH_KEY_VALUE
	DB_AUTH_OVER_PLAN
	DB_CLIENT_LOCKED
	DB_CLIENT_TYPE
	DB_CLIENT_NOT_PAID
	DB_AUTH_KEYID_VALUE
)
const (
	CLI_CONNECT = iota + 201
	CLI_RESPONSE
	CLI_NUMBER
	CLI_NIP
	CLI_REGON
	CLI_KRS
	CLI_EUVAT
	CLI_IBAN
	CLI_EXCEPTION
	CLI_DATEFORMAT
	CLI_INPUT
)
